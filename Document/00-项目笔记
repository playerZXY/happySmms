day01需求:
    1. 搭建项目目录
        // 方式一
        a. 创建目录
            vue create 项目名

        b. 启动项目
            npm run serve 或 yarn serve

        // 方式二
        a. 复制一个项目目录，安装依赖
            yarn   或   cnpm i

        b. 启动项目
            yarn serve 或 npm run serve

    2. 集成element-ui
        a. 安装
            yarn add element-ui 或  cnpm i element-ui --save

        b. 引入（在main.js）
            import ElementUI from 'element-ui'; // 引入JS组件
            import 'element-ui/lib/theme-chalk/index.css'; // 引入css样式

        c. 注册
            Vue.use( ElementUI )

    3. 引入重置样式 reset.css 和 公用样式 common.css (main.js中)
        import './xxx/reset.css';
        import './xxx/common.css';

    4. 登录页面实现
        a. 新建页面
        b. 配路由
        c. 写静态界面
        d. 验证
            前端常用验证: 非空 长度 正则 一致性

            // A. 内置验证
            { required: true, message: '提示信息', trigger: 'blur' }, // 非空
            { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' } // 长度

            // B. 自定义验证
            rules: {
                要验证的字段: [
                    { validator: 自定义验证函数名, trigger: '触发方式' }, // 自定义验证
                ]
            }

            // 实现自定义验证函数
            const 自定义验证函数名 = (rule, value, callback) => {
                // rule是验证规则数据对象 这里用不到。
                // value是用户输入的值，需要对这个值作出各种判断，然后根据判断结果给出不同的提示
                // callback是一个回调函数，有两种使用情况,
                    失败:
                        callback(new Error('失败的提示信息'))   // 就会出现失败信息 红色边框 红色叉叉
                    成功:
                        callback() // 直接掉用callback 就会出现绿色边框 绿色勾勾
            }

        e. template页面中，使用ref属性声明的标签dom  
            <el-form ref="ref的值"></el-form>
            this.$refs.ref的值   // 可以这样获取上面的dom哦 !!!

        f. 几个内置的方法：
            validate:  表单验证 （提交表单的函数中）
            resetFields: 重置表单字段为空 （重置表单函数中）
            validateField: 触发某个自动的验证 (密码的一致性验证函数中)

    5 后端组件规划
        0. 后端父组件
            Home

        a. 账号管理
            账号管理 AccountManage
            添加账号 AccountAdd
            密码修改 PasswordModify

        b. 商品管理
            商品管理 GoodsManage
            添加商品 GoodsAdd
            
        c. 统计管理
            销售统计 SellTotal
            进货统计 StockTotal

        d. 系统管理
            系统信息 SystemInfo
            
    6. 分配组件路由
        注意事项：
            a. 路由一定要有出口 !!! 路由的出口定义在父组件的template中
            b. 记得有两个地方使用了重定向哦！ / =>  /login     /home =>  /home/system
            c. 项目中使用了路由，那么Vue实例对象上有两个属性
                $router   // this.$router.push('/要跳转的路径')
                $route    // $route.path 获取地址栏的url

day02需求
    A 组件使用强化:
        1. 导航抽取
            a. 循环。
            b. 把导航都交给一份数据来控制。
        2. 头部组件实现
            a. 引入组件
            b. 注册组件
            c. 使用组件
        3. 尾部组件实现
        4. 账号添加组件实现
        5. 账号管理列表组件实现

    B. 后端项目搭建
        1. 创建项目目录
            express -e 目录名

        2. 进入项目 安装依赖
            cnpm i 

        3. 监听端口，改造package.json，启动项目
            npm start

    C. 后端项目集成mysql
    
day03需求:
    1 后端项目： 给账号管理模块单独分配一个路由写后端
        1. 创建子路由 account.js
        2. 在app.js中引入子路由
        3. 在app.js中分配子路由

    2 账号添加（***）
        1. 前端- 点确定，取参数，发请求，参数发给后端。
        2. 后端- 接请求，接参数，把参数插入数据库，根据操作结果判断
            成功: 响应成功信息.
            失败：响应失败信息.
        3. 前端- 接后端响应数据，判断
            成功： 弹成功提示， 跳账号管理
            失败： 弹失败提示

    3 账号列表功能（***）
        1. 前端- 当跳转到账号列表，生命周期created发送请求
        2. 后端- 接请求，去数据库查询所有数据，响应给前端
        3. 前端- 接收数据，渲染列表。
    4 单条删除（***）
        1. 前端- 点删除，触发函数，发请求，传id

        2. 后端- 接请求，接id，根据id删数据，判断
            成功： 响应成功信息
            失败： 响应失败信息

        3. 前端- 接收后端响应数据，判断
            成功： 弹提示 刷列表（重新请求一次数据）
            失败:  弹失败提示

    5 修改功能实现(***)
        A 数据回填
            1. 前端- 点编辑，触发函数，传入id, 发送请求给后端，把id发给后端 且 同时弹出修改表单模态框
            2. 后端- 接请求，接id，根据id查数据，响应给前端
            3. 前端- 接收数据，回填修改表单

        B 保存修改新数据
            1. 前端- 点确定修改，发请求，把新数据 和 原来的id 一起发送给后端
            2. 后端- 接请求，接新数据和原来的id，执行修改操作，判断
                成功：响应成功信息
                失败：响应失败信息
            3. 前端- 接收后端响应的数据，判断
                成功: 弹提示 刷列表 
                失败: 弹提示

day04需求:
    1 批量删除
        // A. 准备阶段
        1. 前端- 点击取消选择，触发函数，取消表格的选中状态   // 取消选择
        2. 前端- 给表格绑定“用户选中状态改变”事件，在事件处理函数中，会"自动"传入“选中”的数据。
        3. 前端- 获取“选中数据的id们”。
        
        // B. 批量删除阶段
        1. 前端- 给批量删除按钮绑定点击事件，在事件里面，发送请求给后端，把"id们"发送给后端
        2. 后端- 接收请求，接收"id们" 构造sql，执行删除，判断
            成功： 返回成功信息
            失败： 返回失败信息
        3. 前端- 接收后端响应的数据，判断
            成功： 弹提示 刷列表
            失败： 弹提示

        // C. 优化
        1. 前端- 如果用户没有选中数据，直接弹出提示，直接return, 不发送请求
        2. 前端- 点击删除按钮的时候，弹出确认框，确认删，否则取消

    2 工作中都是后端分页,分页条件分析:
        1. 前端需要传什么给后端?
            currentPage   // 当前页 （工作中只传这个即可）
            pageSize      // 每页条数

        2. 后端需要传什么给前端?
            total   // 数据总条数
            data    // 每页对应的数据

        3. 后端分页条件
            select * from 表名 limit 跳过多少条, 限制输出多少条;
            select * from 表名 limit 0, 10;
            select * from 表名 limit 10, 10;
            select * from 表名 limit 20, 10;

            分页公式：
            select * from 表名 limit (currentPage - 1) * pageSize, pageSize;

            示例： 103条数据  每页 pageSize = 10 条
            当前页（currentPage）        条件
              1                         limit 0, 10
              2                         limit 10, 10
              3                         limit 20, 10
              4                         limit 30, 10
              11                        limit 100, 10

            示例：13条数据 每页 pageSize = 3 条
            当前页(currentPage)       条件
            1                         limit 0, 3
            2                         limit 3, 3
            3                         limit 6, 3
            4                         limit 9, 3
            5                         limit 12, 3
    
    3 分页实现
        1. 前端- 收集pageSize和currentPage
        2. 前端- 调用分页函数，发送请求给后端，把pageSize 和 currentPage 一起发送给后端。
            注意： 首先必须三个地方调用哦 ！！！
                a. 生命周期created
                b. 当前页码改变函数
                c. 每页条数改变函数
            说明： 后续删除成功，修改成功，批量删除成功...需要刷新列表的地方，都改为调用分页函数。
        3. 后端- 接收请求，接收参数 pageSize 和 currentPage 
        4. 后端- 查询总数据，计算出数据总条数total，按照分页条件查询每一个页码对应的数据
                 把数据总条数 total 和 当前页码对应的数据 data 一起响应给前端
        5. 前端- 接收，渲染。

    4 登录功能
        A 检查账号和密码是否正确
            1. 前端- 点击登录，发送账号和密码给后端
            2. 后端- 接收请求，接收参数，执行sql，根据结果判断
                成功: 响应成功的信息给前端
                失败： 响应失败的信息给前端
            3. 接收后端响应的数据，判断
                成功: 弹提示 跳转到后端首页（系统信息）
                失败: 弹提示

        B 检查登录的状态
            1. 后端- 如果登录成功，生成token(令牌)，发送给前端
            2. 前端- 接收token，存入本地存储（localStorage）
            3. 前端- 在入口文件 main.js 拦截所有路由（把所有路由保护起来）
                如果有令牌：放行
                如果没有令牌: 
                    a. 如果去的是登录 直接放行
                    b. 如果去的是其他页面，直接跳转到登录页面。

        C 退出登录
            1. 前端- 清除token
            2. 前端- 弹出提示信息
            3. 前端- 跳转到登录页面


    
